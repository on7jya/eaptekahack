# Generated by Django 3.1.6 on 2021-05-29 05:27

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                (
                    'is_superuser',
                    models.BooleanField(
                        default=False,
                        help_text='Designates that this user has all permissions without explicitly assigning them.',
                        verbose_name='superuser status',
                    ),
                ),
                (
                    'username',
                    models.CharField(
                        error_messages={'unique': 'A user with that username already exists.'},
                        help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name='username',
                    ),
                ),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                (
                    'is_staff',
                    models.BooleanField(
                        default=False,
                        help_text='Designates whether the user can log into this admin site.',
                        verbose_name='staff status',
                    ),
                ),
                (
                    'is_active',
                    models.BooleanField(
                        default=True,
                        help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                        verbose_name='active',
                    ),
                ),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=16, null=True, verbose_name='Номер телефона')),
                (
                    'groups',
                    models.ManyToManyField(
                        blank=True,
                        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.Group',
                        verbose_name='groups',
                    ),
                ),
                (
                    'user_permissions',
                    models.ManyToManyField(
                        blank=True,
                        help_text='Specific permissions for this user.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.Permission',
                        verbose_name='user permissions',
                    ),
                ),
            ],
            options={'verbose_name': 'Пользователь', 'verbose_name_plural': 'Пользователи',},
            managers=[('objects', django.contrib.auth.models.UserManager()),],
        ),
        migrations.CreateModel(
            name='Products',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ID', models.IntegerField()),
                ('NAME', models.CharField(max_length=512)),
            ],
            options={
                'verbose_name': 'Препарат',
                'verbose_name_plural': 'Products',
                'unique_together': {('ID', 'NAME')},
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('ID', models.IntegerField(primary_key=True, serialize=False)),
                ('CODE', models.CharField(max_length=512)),
                ('NAME', models.CharField(max_length=512)),
            ],
            options={'verbose_name': 'Параметр', 'verbose_name_plural': 'Property',},
        ),
        migrations.CreateModel(
            name='PropertyValues',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('IBLOCK_ELEMENT_ID', models.IntegerField(unique=True)),
                ('PROPERTY_276', models.CharField(blank=True, max_length=512, null=True)),
                ('PROPERTY_429', models.CharField(blank=True, max_length=512, null=True)),
                ('PROPERTY_326', models.CharField(blank=True, max_length=512, null=True)),
                ('PROPERTY_574', models.CharField(blank=True, max_length=512, null=True)),
                ('PROPERTY_265', models.CharField(blank=True, max_length=512, null=True)),
                ('PROPERTY_284', models.CharField(blank=True, max_length=512, null=True)),
                ('PROPERTY_541', models.CharField(blank=True, max_length=512, null=True)),
                ('PROPERTY_542', models.CharField(blank=True, max_length=512, null=True)),
                ('PROPERTY_343', models.CharField(blank=True, max_length=512, null=True)),
                ('PROPERTY_428', models.CharField(blank=True, max_length=512, null=True)),
                ('PROPERTY_274', models.CharField(blank=True, max_length=512, null=True)),
                ('PROPERTY_263', models.FloatField(blank=True, null=True)),
                ('PROPERTY_264', models.CharField(blank=True, max_length=512, null=True)),
                ('PROPERTY_594', models.CharField(blank=True, max_length=512, null=True)),
                ('PROPERTY_344', models.CharField(blank=True, max_length=512, null=True)),
                ('PROPERTY_483', models.FloatField(blank=True, max_length=512, null=True)),
                ('PROPERTY_536', models.CharField(blank=True, max_length=512, null=True)),
                ('PROPERTY_540', models.CharField(blank=True, max_length=512, null=True)),
                ('PROPERTY_356', models.CharField(blank=True, max_length=512, null=True)),
                ('PROPERTY_567', models.CharField(blank=True, max_length=512, null=True)),
                ('PROPERTY_332', models.CharField(blank=True, max_length=512, null=True)),
                ('PROPERTY_283', models.CharField(blank=True, max_length=512, null=True)),
            ],
            options={'verbose_name': 'Значения параметра', 'verbose_name_plural': 'PropertyValues',},
        ),
        migrations.CreateModel(
            name='TreatmentCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schedule_info', models.JSONField(default=dict, verbose_name='График приема лекарств')),
                (
                    'quantity',
                    models.DecimalField(decimal_places=3, max_digits=9, verbose_name='Количество единиц для приема'),
                ),
                (
                    'quantity_exists',
                    models.DecimalField(decimal_places=3, max_digits=9, verbose_name='Количество единиц в наличии'),
                ),
                (
                    'drug',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='treatment_course',
                        to='eaptekahack.products',
                        verbose_name='Препарат',
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='treatment_course',
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='Юзер',
                    ),
                ),
            ],
            options={'verbose_name': 'Курс приема', 'verbose_name_plural': 'Курс приема',},
        ),
        migrations.CreateModel(
            name='PropertyMultipleValues',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('IBLOCK_ELEMENT_ID', models.IntegerField()),
                ('IBLOCK_PROPERTY_ID', models.CharField(max_length=512)),
                ('VALUE', models.CharField(blank=True, max_length=512, null=True)),
                ('VALUE_ENUM', models.CharField(blank=True, max_length=512, null=True)),
                ('VALUE_NUM', models.FloatField(blank=True, null=True)),
                ('DESCRIPTION', models.CharField(blank=True, max_length=512, null=True)),
            ],
            options={
                'verbose_name': 'Параметр с несколькими значениями',
                'verbose_name_plural': 'PropertyMultipleValues',
                'unique_together': {('IBLOCK_ELEMENT_ID', 'IBLOCK_PROPERTY_ID', 'VALUE')},
            },
        ),
        migrations.CreateModel(
            name='ProductMNN',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('MNN_ID', models.CharField(max_length=512)),
                ('PRODUCT_ID', models.IntegerField(blank=True, null=True)),
                ('MNN_NAME', models.CharField(blank=True, max_length=512, null=True, verbose_name='Наименование')),
                ('MNN_CODE', models.CharField(blank=True, max_length=512, null=True, verbose_name='Код')),
            ],
            options={
                'verbose_name': 'Международное непатентованное наименование',
                'verbose_name_plural': 'ProductMNN',
                'unique_together': {('MNN_ID', 'PRODUCT_ID')},
            },
        ),
    ]
